using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows.Media;
using YoYoStudio.Common.Wpf.ViewModel;
using YoYoStudio.Model.Core;
using YoYoStudio.Resource;

namespace YoYoStudio.Client.ViewModel
{
    public class AgentPortalWindowViewModel:WindowViewModel
    {
        private List<TitledViewModel> agentPortalCommandItems;
        public List<TitledViewModel> AgentPortalCommandItems 
        {
            get
            {
                if (agentPortalCommandItems == null)
                    agentPortalCommandItems = CreateFunctionTreeItems();
                return agentPortalCommandItems;
            }
            set
            {
                ChangeAndNotify<List<TitledViewModel>>(ref agentPortalCommandItems, value, () => AgentPortalCommandItems);
            }
        }

        private FunctionNodeViewModel selectedFunction;
        public FunctionNodeViewModel SelectedFunction
        {
            get { return selectedFunction; }
            set { ChangeAndNotify<FunctionNodeViewModel>(ref selectedFunction, value, () => SelectedFunction); }
        }

        private List<TitledViewModel> CreateFunctionTreeItems()
        {
            List<TitledViewModel> result = new List<TitledViewModel>();
            FunctionNodeViewModel func1 = new FunctionNodeViewModel(Text.AgentCommission, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected), null, true);
            SelectedFunction = func1;
            FunctionNodeViewModel func2 = new FunctionNodeViewModel(Text.AgentPayment, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func3 = new FunctionNodeViewModel(Text.BankAccount, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func4 = new FunctionNodeViewModel(Text.BuyDianCard, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func5 = new FunctionNodeViewModel(Text.BuyGuanHao, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func6 = new FunctionNodeViewModel(Text.BuyMembership, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func7 = new FunctionNodeViewModel(Text.Deposit, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func8 = new FunctionNodeViewModel(Text.DianCardSale, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func9 = new FunctionNodeViewModel(Text.DianCardStocks, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func10 = new FunctionNodeViewModel(Text.Hoster, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func11 = new FunctionNodeViewModel(Text.LogoffExit, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func12 = new FunctionNodeViewModel(Text.PasswordChange, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            FunctionNodeViewModel func13 = new FunctionNodeViewModel(Text.UserCash, new AgentPortalWindowViewModel(), new SecureCommand(FunctionSelected));
            result.Add(func1);
            result.Add(func2);
            result.Add(func3);
            result.Add(func4);
            result.Add(func5);
            result.Add(func6);
            result.Add(func7);
            result.Add(func8);
            result.Add(func9);
            result.Add(func10);
            result.Add(func11);
            result.Add(func12);
            result.Add(func13);
            return result;
        }

        private void FunctionSelected(SecureCommandArgs arg)
        {
            FunctionNodeViewModel newValue = arg.Content as FunctionNodeViewModel;
            if (newValue != null && newValue != SelectedFunction)
            {
                if (SelectedFunction != null)
                {
                    SelectedFunction.IsSelected = true;
                }
                SelectedFunction = newValue;
                SelectedFunction.IsSelected = true;
            }
        }
    }

    public class FunctionNodeViewModel : TitledViewModel
    {
        private ReadOnlyCollection<FunctionNodeViewModel> functions;
        public ReadOnlyCollection<FunctionNodeViewModel> Functions { get { return functions; } }

        private SecureCommand funcCommand;
        public SecureCommand FuncCommand { get { return funcCommand; } }

        private ViewModelBase functionVM;
        public ViewModelBase FunctionVM
        {
            get { return functionVM; }
            set { ChangeAndNotify<ViewModelBase>(ref functionVM, value, () => FunctionVM); }
        }

        private bool isSelected;
        public bool IsSelected
        {
            get { return isSelected; }
            set { ChangeAndNotify<bool>(ref isSelected, value, () => IsSelected); }
        }

        public FunctionNodeViewModel(string title)
            : this(title, null)
        { }

        public FunctionNodeViewModel(string title,  ViewModelBase vm)
            : this(title, vm, null)
        { }
        public FunctionNodeViewModel(string title,  ViewModelBase vm, SecureCommand cmd)
            : this(title, vm, cmd, null)
        {

        }
        public FunctionNodeViewModel(string title, ViewModelBase vm, SecureCommand cmd, ReadOnlyCollection<FunctionNodeViewModel> funcs)
            : this(title, vm, cmd, funcs, false)
        {
        }

        public FunctionNodeViewModel(string title, ViewModelBase vm, SecureCommand cmd, ReadOnlyCollection<FunctionNodeViewModel> funcs, bool isSelected)
        {
            Title = title;
           
            functionVM = vm;
            funcCommand = cmd;
            functions = funcs;
            IsSelected = isSelected;
        }
    }
}
